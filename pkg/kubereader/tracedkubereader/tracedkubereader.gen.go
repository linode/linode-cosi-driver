// Code generated by gowrap. DO NOT EDIT.
// template: https://raw.githubusercontent.com/hexdigest/gowrap/6c8f05695fec23df85903a8da0af66ac414e2a63/templates/opentelemetry
// gowrap: http://github.com/hexdigest/gowrap

package tracedkubereader

//go:generate gowrap gen -p github.com/linode/linode-cosi-driver/pkg/kubereader -i KubeReader -t https://raw.githubusercontent.com/hexdigest/gowrap/6c8f05695fec23df85903a8da0af66ac414e2a63/templates/opentelemetry -o tracedkubereader.gen.go -l ""

import (
	"context"

	"github.com/linode/linode-cosi-driver/pkg/kubereader"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// KubeReaderWithTracing implements kubereader.KubeReader interface instrumented with opentracing spans
type KubeReaderWithTracing struct {
	kubereader.KubeReader
	_instance      string
	_spanDecorator func(span trace.Span, params, results map[string]interface{})
}

// NewKubeReaderWithTracing returns KubeReaderWithTracing
func NewKubeReaderWithTracing(base kubereader.KubeReader, instance string, spanDecorator ...func(span trace.Span, params, results map[string]interface{})) KubeReaderWithTracing {
	d := KubeReaderWithTracing{
		KubeReader: base,
		_instance:  instance,
	}

	if len(spanDecorator) > 0 && spanDecorator[0] != nil {
		d._spanDecorator = spanDecorator[0]
	}

	return d
}

// Get implements kubereader.KubeReader
func (_d KubeReaderWithTracing) Get(ctx context.Context, key client.ObjectKey, obj client.Object, opts ...client.GetOption) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "kubereader.KubeReader.Get")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"key":  key,
				"obj":  obj,
				"opts": opts}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.KubeReader.Get(ctx, key, obj, opts...)
}

// List implements kubereader.KubeReader
func (_d KubeReaderWithTracing) List(ctx context.Context, list client.ObjectList, opts ...client.ListOption) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "kubereader.KubeReader.List")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"list": list,
				"opts": opts}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.KubeReader.List(ctx, list, opts...)
}
