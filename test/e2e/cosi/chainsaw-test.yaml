---
# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/test-chainsaw-v1alpha1.json
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: generic-test
spec:
  template: true
  steps:
  - name: Check if COSI Controller exist
    try:
    - assert:
        resource:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: container-object-storage-controller
            namespace: container-object-storage-system
          status:
            availableReplicas: 1
  - name: Create test BucketClass and BucketAccessClass
    try:
    - apply:
        resource:
          apiVersion: objectstorage.k8s.io/v1alpha1
          kind: BucketClass
          metadata:
            name: ($namespace)
          driverName: objectstorage.cosi.linode.com
          deletionPolicy: Delete
          parameters:
            cosi.linode.com/v1/region: us-east
            cosi.linode.com/v1/acl: private
            cosi.linode.com/v1/cors: disabled
    - apply:
        resource:
          apiVersion: objectstorage.k8s.io/v1alpha1
          kind: BucketAccessClass
          metadata:
            name: ($namespace)
          driverName: objectstorage.cosi.linode.com
          authenticationType: Key
          parameters:
            cosi.linode.com/v1/permissions: read_only
  - name: Create BucketClaim
    try:
    - apply:
        resource:
          apiVersion: objectstorage.k8s.io/v1alpha1
          kind: BucketClaim
          metadata:
            name: ($namespace)
          spec:
            bucketClassName: ($namespace)
            protocols: ["S3"]
  - name: Check if BucketClaim is ready
    try:
    - assert:
        resource:
          apiVersion: objectstorage.k8s.io/v1alpha1
          kind: BucketClaim
          metadata:
            name: ($namespace)
          status:
            bucketReady: true
  - name: Create BucketAccess
    try:
    - apply:
        resource:
          apiVersion: objectstorage.k8s.io/v1alpha1
          kind: BucketAccess
          metadata:
            name: ($namespace)
          spec:
            bucketClaimName: ($namespace)
            protocol: S3
            bucketAccessClassName: ($namespace)
            credentialsSecretName: ($namespace)
            serviceAccountName: ($namespace)
  - name: Check if BucketAccess is granted
    try:
    - assert:
        resource:
          apiVersion: objectstorage.k8s.io/v1alpha1
          kind: BucketAccess
          metadata:
            name: ($namespace)
          status:
            accessGranted: true
  - name: Check if Secret exists
    try:
    - assert:
        resource:
          apiVersion: v1
          kind: Secret
          metadata:
            name: ($namespace)
  - name: Run ObjectStorage validation tool
    try:
    - apply:
        resource:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: validation
          data:
            schema.json: |
              {
                "$schema": "http://json-schema.org/draft-07/schema#",
                "type": "object",
                "properties": {
                  "spec": {
                    "type": "object",
                    "properties": {
                      "bucketName": {
                        "type": "string"
                      },
                      "authenticationType": {
                        "type": "string",
                        "enum": [
                          "IAM",
                          "Key"
                        ]
                      },
                      "protocols": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "S3",
                            "Azure",
                            "GCP"
                          ]
                        },
                        "minItems": 1
                      },
                      "secretS3": {
                        "oneOf": [
                          {
                            "type": "null"
                          },
                          {
                            "type": "object"
                          }
                        ],
                        "properties": {
                          "endpoint": {
                            "type": "string"
                          },
                          "region": {
                            "type": "string"
                          },
                          "accessKeyID": {
                            "type": "string"
                          },
                          "accessSecretKey": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "endpoint",
                          "region",
                          "accessKeyID",
                          "accessSecretKey"
                        ]
                      },
                      "secretAzure": {
                        "oneOf": [
                          {
                            "type": "null"
                          },
                          {
                            "type": "object"
                          }
                        ],
                        "properties": {
                          "accessToken": {
                            "type": "string"
                          },
                          "expiryTimeStamp": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "accessToken",
                          "expiryTimeStamp"
                        ]
                      }
                    },
                    "required": [
                      "bucketName",
                      "authenticationType",
                      "protocols",
                      "secretAzure",
                      "secretS3"
                    ]
                  }
                },
                "required": [
                  "spec"
                ]
              }

            entrypoint.sh: |
              #!/usr/bin/env sh
              set -e
              pip install check-jsonschema
              check-jsonschema --schemafile /scripts/schema.json /conf/BucketInfo.json

    - create:
        resource:
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: validation
          spec:
            ttlSecondsAfterFinished: 100
            template:
              spec:
                restartPolicy: Never
                containers:
                - name: secret-test
                  image: docker.io/library/python:3.12
                  command: [ "sh", "/scripts/entrypoint.sh" ]
                  env:
                  - name: PYTHONUNBUFFERED
                    value: '1'
                  - name: PIP_ROOT_USER_ACTION
                    value: ignore
                  volumeMounts:
                  - mountPath: /scripts
                    name: scripts
                  - mountPath: /conf
                    name: secret-vol
                volumes:
                - name: scripts
                  configMap:
                    name: validation
                - name: secret-vol
                  secret:
                    secretName: ($namespace)
                    items:
                    - key: BucketInfo
                      path: BucketInfo.json

  - name: Check if ObjectStorage secret validation tool completed succesfully
    try:
    - assert:
        resource:
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: validation
          status:
            succeeded: 1
